const { check } = require("express-validator");

const postUserValidation = [
  check("firstname")
    .exists()
    .withMessage("No value given for firstname field")
    .isString()
    .withMessage("Invalid type for firstname field")
    .notEmpty()
    .withMessage("Firstname field cannot be blank")
    .trim()
    .escape()
    .custom((value) => !/\s/.test(value))
    .withMessage("No spaces are allowed in the firstname field")
    .isLength({ max: 50 })
    .withMessage("firstname must be less than 50 Characters"),
  check("lastname")
    .exists()
    .withMessage("No value given for lastname field")
    .isString()
    .withMessage("Invalid type for lastname field")
    .notEmpty()
    .withMessage("Lastname field cannot be blank")
    .trim()
    .escape()
    .custom((value) => !/\s/.test(value))
    .withMessage("No spaces are allowed in the lastname field")
    .isLength({ max: 50 })
    .withMessage("lastname must be less than 50 Characters"),
  check("email")
    .exists()
    .withMessage("No value given for email field")
    .isString()
    .withMessage("Invalid type for email field")
    .notEmpty()
    .withMessage("Email field cannot be blank")
    .trim()
    .escape()
    .custom((value) => !/\s/.test(value))
    .withMessage("No spaces are allowed in the email field")
    .isEmail()
    .normalizeEmail()
    .withMessage("Must be a valid email address")
    .isLength({ max: 150 })
    .withMessage("email address must be less than 150 Characters"),
  check("password")
    .exists()
    .withMessage("No value given for password field")
    .isString()
    .withMessage("Invalid type for password field")
    .notEmpty()
    .withMessage("Password field cannot be blank")
    .trim()
    .escape()
    .custom((value) => !/\s/.test(value))
    .withMessage("No spaces are allowed in the password field")
    .isLength({ max: 50 })
    .withMessage("password must be less than 50 Characters"),
  check("ahpra_num")
    .optional({ nullable: true })
    .isString()
    .withMessage("Invalid type for ahpra_num field")
    .notEmpty()
    .withMessage("ahpra_num field cannot be blank")
    .trim()
    .escape()
    .isLength({ max: 50 })
    .withMessage("ahpra_num must be less than 50 Characters"),
  check("provider_num")
    .optional({ nullable: true })
    .isString()
    .withMessage("Invalid type for provider_num field")
    .notEmpty()
    .withMessage("provider_num field cannot be blank")
    .trim()
    .escape()
    .isLength({ max: 50 })
    .withMessage("provider_num must be less than 50 Characters"),
  check("prescriber_num")
    .optional({ nullable: true })
    .isString()
    .withMessage("Invalid type for prescriber_num field")
    .notEmpty()
    .withMessage("prescriber_num field cannot be blank")
    .trim()
    .escape()
    .isLength({ max: 50 })
    .withMessage("prescriber_num must be less than 50 Characters"),
];

const userValidation = [
  check("email")
    .exists()
    .withMessage("No value given for email field")
    .isString()
    .withMessage("Invalid type for email field")
    .notEmpty()
    .withMessage("Email field cannot be blank")
    .trim()
    .escape()
    .custom((value) => !/\s/.test(value))
    .withMessage("No spaces are allowed in the email field")
    .isEmail()
    .normalizeEmail()
    .withMessage("Must be a valid email address")
    .isLength({ max: 150 })
    .withMessage("email address must be less than 150 Characters"),
  check("password")
    .exists()
    .withMessage("No value given for password field")
    .isString()
    .withMessage("Invalid type for password field")
    .notEmpty()
    .withMessage("Password field cannot be blank")
    .trim()
    .escape()
    .custom((value) => !/\s/.test(value))
    .withMessage("No spaces are allowed in the password field")
    .isLength({ max: 50 })
    .withMessage("password must be less than 50 Characters"),
];

const patchUserValidation = [
  check("userId")
    .exists()
    .withMessage("userId path is required")
    .trim()
    .escape()
    .custom((value) =>
      /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/.test(
        value
      )
    )
    .withMessage("userId must be uuid format"),
  check("firstname")
    .optional({ nullable: true })
    .isString()
    .withMessage("Invalid type for firstname field")
    .notEmpty()
    .withMessage("Firstname field cannot be blank")
    .trim()
    .escape()
    .custom((value) => !/\s/.test(value))
    .withMessage("No spaces are allowed in the firstname field")
    .isLength({ max: 50 })
    .withMessage("firstname must be less than 50 Characters"),
  check("lastname")
    .optional({ nullable: true })
    .isString()
    .withMessage("Invalid type for lastname field")
    .notEmpty()
    .withMessage("Lastname field cannot be blank")
    .trim()
    .escape()
    .custom((value) => !/\s/.test(value))
    .withMessage("No spaces are allowed in the lastname field")
    .isLength({ max: 50 })
    .withMessage("lastname must be less than 50 Characters"),
  check("email")
    .optional({ nullable: true })
    .isString()
    .withMessage("Invalid type for email field")
    .notEmpty()
    .withMessage("Email field cannot be blank")
    .trim()
    .escape()
    .custom((value) => !/\s/.test(value))
    .withMessage("No spaces are allowed in the email field")
    .isEmail()
    .normalizeEmail()
    .withMessage("Must be a valid email address")
    .isLength({ max: 150 })
    .withMessage("email address must be less than 150 Characters"),
  check("password")
    .optional({ nullable: true })
    .isString()
    .withMessage("Invalid type for password field")
    .notEmpty()
    .withMessage("Password field cannot be blank")
    .trim()
    .escape()
    .custom((value) => !/\s/.test(value))
    .withMessage("No spaces are allowed in the password field")
    .isLength({ max: 50 })
    .withMessage("password must be less than 50 Characters"),
  check("ahpra_num")
    .optional({ nullable: true })
    .isString()
    .withMessage("Invalid type for ahpra_num field")
    .notEmpty()
    .withMessage("ahpra_num field cannot be blank")
    .trim()
    .escape()
    .isLength({ max: 50 })
    .withMessage("ahpra_num must be less than 50 Characters"),
  check("provider_num")
    .optional({ nullable: true })
    .isString()
    .withMessage("Invalid type for provider_num field")
    .notEmpty()
    .withMessage("provider_num field cannot be blank")
    .trim()
    .escape()
    .isLength({ max: 50 })
    .withMessage("provider_num must be less than 50 Characters"),
  check("prescriber_num")
    .optional({ nullable: true })
    .isString()
    .withMessage("Invalid type for prescriber_num field")
    .notEmpty()
    .withMessage("prescriber_num field cannot be blank")
    .trim()
    .escape()
    .isLength({ max: 50 })
    .withMessage("prescriber_num must be less than 50 Characters"),
];

const deleteUserValidation = [
  check("userId")
    .exists()
    .withMessage("userId value is required")
    .trim()
    .escape()
    .custom((value) =>
      /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/.test(
        value
      )
    )
    .withMessage("userId must be uuid format"),
];

module.exports = {
  postUserValidation,
  userValidation,
  patchUserValidation,
  deleteUserValidation,
};
